"""Initial migration

Revision ID: 452b42b124a3
Revises: 
Create Date: 2025-09-06 14:43:35.177418

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector # added after script was generated


# revision identifiers, used by Alembic.
revision: str = '452b42b124a3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exams',
    sa.Column('exam_id', sa.Integer(), nullable=False),
    sa.Column('exam_name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('exam_id'),
    sa.UniqueConstraint('exam_name')
    )
    op.create_table('subjects',
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.Column('subject_name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('subject_id')
    )
    op.create_table('users',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('chapters',
    sa.Column('chapter_id', sa.Integer(), nullable=False),
    sa.Column('chapter_name', sa.String(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.subject_id'], ),
    sa.PrimaryKeyConstraint('chapter_id')
    )
    op.create_table('user_enrollments',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('exam_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['exam_id'], ['exams.exam_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'exam_id')
    )
    op.create_table('user_question_type_analytics',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('exam_id', sa.Integer(), nullable=False),
    sa.Column('question_type', sa.String(), nullable=False),
    sa.Column('questions_attempted', sa.Integer(), nullable=False),
    sa.Column('correct_answers', sa.Integer(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['exam_id'], ['exams.exam_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'exam_id', 'question_type')
    )
    op.create_table('user_subject_analytics',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('exam_id', sa.Integer(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.Column('questions_attempted', sa.Integer(), nullable=False),
    sa.Column('correct_answers', sa.Integer(), nullable=False),
    sa.Column('total_time_taken_seconds', sa.BigInteger(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['exam_id'], ['exams.exam_id'], ),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.subject_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'exam_id', 'subject_id')
    )
    op.create_table('subtopics',
    sa.Column('subtopic_id', sa.Integer(), nullable=False),
    sa.Column('subtopic_name', sa.String(), nullable=False),
    sa.Column('chapter_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.chapter_id'], ),
    sa.PrimaryKeyConstraint('subtopic_id')
    )
    op.create_table('tests',
    sa.Column('test_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('chapter_id', sa.Integer(), nullable=True),
    sa.Column('subject_id', sa.Integer(), nullable=True),
    sa.Column('test_name', sa.String(), nullable=False),
    sa.Column('test_type', sa.Enum('CHAPTER_TEST', 'SUBJECT_TEST', 'FULL_MOCK', 'CUSTOM', name='testtypeenum'), nullable=False),
    sa.Column('status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'PAUSED', name='teststatusenum'), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('final_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.chapter_id'], ),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.subject_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('test_id')
    )
    op.create_table('user_chapter_analytics',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('exam_id', sa.Integer(), nullable=False),
    sa.Column('chapter_id', sa.Integer(), nullable=False),
    sa.Column('questions_attempted', sa.Integer(), nullable=False),
    sa.Column('correct_answers', sa.Integer(), nullable=False),
    sa.Column('total_time_taken_seconds', sa.BigInteger(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.chapter_id'], ),
    sa.ForeignKeyConstraint(['exam_id'], ['exams.exam_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'exam_id', 'chapter_id')
    )
    op.create_table('questions',
    sa.Column('question_id', sa.String(), nullable=False),
    sa.Column('question_text', sa.Text(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=768), nullable=True),
    sa.Column('question_type', sa.Enum('MCSC', 'MCMC', 'INT', 'NUM', name='questiontype'), nullable=False),
    sa.Column('subtopic_id', sa.Integer(), nullable=False),
    sa.Column('difficulty_level', sa.Enum('EASY', 'MEDIUM', 'HARD', name='difficultylevel'), nullable=False),
    sa.Column('source', sa.Enum('PYQ', 'NCERT', 'GENERATED', name='sourceenum'), nullable=False),
    sa.Column('source_details', sa.String(), nullable=True),
    sa.Column('positive_marks', sa.Integer(), nullable=False),
    sa.Column('negative_marks', sa.Integer(), nullable=False),
    sa.Column('solution_explanation', sa.Text(), nullable=True),
    sa.Column('ai_validation_status', sa.Enum('PENDING', 'VALIDATED', 'REJECTED', name='aivalidationstatusenum'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['subtopic_id'], ['subtopics.subtopic_id'], ),
    sa.PrimaryKeyConstraint('question_id')
    )
    op.create_table('source_material_chunks',
    sa.Column('chunk_id', sa.String(), nullable=False),
    sa.Column('subtopic_id', sa.Integer(), nullable=True),
    sa.Column('source_name', sa.String(), nullable=False),
    sa.Column('chunk_text', sa.Text(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=768), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['subtopic_id'], ['subtopics.subtopic_id'], ),
    sa.PrimaryKeyConstraint('chunk_id')
    )
    op.create_table('question_exam_applicability',
    sa.Column('question_id', sa.String(), nullable=False),
    sa.Column('exam_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['exam_id'], ['exams.exam_id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], ),
    sa.PrimaryKeyConstraint('question_id', 'exam_id')
    )
    op.create_table('question_options',
    sa.Column('option_id', sa.String(), nullable=False),
    sa.Column('question_id', sa.String(), nullable=False),
    sa.Column('option_text', sa.Text(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('is_correct', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], ),
    sa.PrimaryKeyConstraint('option_id')
    )
    op.create_table('test_answers',
    sa.Column('answer_id', sa.String(), nullable=False),
    sa.Column('test_id', sa.String(), nullable=False),
    sa.Column('question_id', sa.String(), nullable=False),
    sa.Column('integer_answer', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('CORRECT', 'INCORRECT', 'UNATTEMPTED', 'MARKED_FOR_REVIEW', name='testanswerstatusenum'), nullable=False),
    sa.Column('time_taken_seconds', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], ),
    sa.ForeignKeyConstraint(['test_id'], ['tests.test_id'], ),
    sa.PrimaryKeyConstraint('answer_id')
    )
    op.create_table('user_starred_questions',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('question_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'question_id')
    )
    op.create_table('test_answer_selections',
    sa.Column('answer_id', sa.String(), nullable=False),
    sa.Column('selected_option_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['answer_id'], ['test_answers.answer_id'], ),
    sa.ForeignKeyConstraint(['selected_option_id'], ['question_options.option_id'], ),
    sa.PrimaryKeyConstraint('answer_id', 'selected_option_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('test_answer_selections')
    op.drop_table('user_starred_questions')
    op.drop_table('test_answers')
    op.drop_table('question_options')
    op.drop_table('question_exam_applicability')
    op.drop_table('source_material_chunks')
    op.drop_table('questions')
    op.drop_table('user_chapter_analytics')
    op.drop_table('tests')
    op.drop_table('subtopics')
    op.drop_table('user_subject_analytics')
    op.drop_table('user_question_type_analytics')
    op.drop_table('user_enrollments')
    op.drop_table('chapters')
    op.drop_table('users')
    op.drop_table('subjects')
    op.drop_table('exams')
    # ### end Alembic commands ###
